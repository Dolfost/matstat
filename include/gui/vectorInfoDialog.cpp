#include "vectorInfoDialog.hpp"
#include "gui/Section.h"
#include <QtCore/qcontainerfwd.h>
#include <numeric>

VectorInfoDialog::VectorInfoDialog(
		VectorEntry* vectorEntry,
		QWidget *parent, Qt::WindowFlags f) 
	: QDialog(parent, f) {
		ve = vectorEntry;

		DataVector::VarSeries* varSeries = vectorEntry->vector->varSeries();

		this->setWindowTitle("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ–∫—Ç–æ—Ä " + vectorEntry->name);
		this->setAttribute(Qt::WA_DeleteOnClose, true);
		QVBoxLayout* mainLayout = new QVBoxLayout();
		this->setLayout(mainLayout);
		mainLayout->setContentsMargins(8,8,8,8);
		mainLayout->setSpacing(8);

		QGroupBox* gropupBox = new QGroupBox("–¢–æ—á–∫–æ–≤—ñ –æ—Ü—ñ–Ω–∫–∏");
		auto* lay = new QHBoxLayout;
		QTableWidget* charTable = new QTableWidget;
		charTable->verticalHeader()->hide();
		charTable->setEditTriggers(QAbstractItemView::NoEditTriggers);
		charTable->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
		lay->setContentsMargins(0,0,0,0);
		gropupBox->setLayout(lay);
		lay->addWidget(charTable);
		mainLayout->addWidget(gropupBox);

		QStringList headers = {
			"–ù–∞–∑–≤–∞", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è", "–ù–∏–∂–Ω. –¥–æ–≤. –∑–Ω–∞—á. (0.95)", "–ù–µ–∑—Å—É–Ω—É—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è",
			"–ó—Å—É–Ω—É—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è", "–í–µ—Ä—Ö. –¥–æ–≤. –∑–Ω–∞—á. (0.95)", "œÉ{Œ∏}"
		};
		QList<int> columnWidths = {
			300, 80, 150, 130, 120, 150, 60
		};
		double prob = 0.95;

		QList<QStringList> contents = {
		{"–°—Ç–∞—Ç. –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–æ–º–µ–Ω—Ç –ø–µ—Ä—à–æ–≥–æ –ø–æ—Ä—è–¥–∫—É", "v‚ÇÅ",
			QString::number(ve->vector->meanConfidence(prob,
						DataVector::UpperL), 'f', precision),
			QString::number(ve->vector->mean(), 'f', precision), "‚Äî",
			QString::number(ve->vector->meanConfidence(prob,
						DataVector::LowerL), 'f', precision),
			QString::number(ve->vector->meanDeviation(), 'f', precision)},
		{"–°—Ç–∞—Ç. —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ä—è–¥–∫—É", "Œº‚ÇÇ",
			QString::number(ve->vector->varianceConfidence(prob,
						DataVector::LowerL), 'f', precision),
			QString::number(ve->vector->variance(), 'f', precision),
			QString::number(ve->vector->variance(DataVector::Measure::PopulationM), 'f', precision),
			QString::number(ve->vector->meanConfidence(prob,
						DataVector::UpperL), 'f', precision),
			QString::number(ve->vector->varianceDeviation(), 'f', precision)},
		{"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞—Å–∏–º–µ—Ç—Ä—ñ—ó", "A",
			QString::number(ve->vector->skewConfidence(prob,
						DataVector::LowerL), 'f', precision),
			QString::number(ve->vector->skew(), 'f',
				precision),
			QString::number(ve->vector->skew(DataVector::Measure::PopulationM), 'f', precision),
			QString::number(ve->vector->skewConfidence(prob,
						DataVector::UpperL), 'f', precision),
			QString::number(ve->vector->skewDeviation(), 'f', precision)},
		{"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –µ–∫—Å—Ü–µ—Å—É", "E",
			QString::number(ve->vector->kurtosisConfidence(prob,
						DataVector::LowerL), 'f', precision),
			QString::number(ve->vector->kurtosis(),
				'f', precision), 
			QString::number(ve->vector->kurtosis(DataVector::Measure::PopulationM), 'f', precision),
			QString::number(ve->vector->kurtosisConfidence(prob,
						DataVector::UpperL), 'f', precision),
			QString::number(ve->vector->kurtosisDeviation(), 'f', precision)},
		{"–ú–µ–¥—ñ–∞–Ω–∞ —Å–µ—Ä—ñ–¥–Ω—ñ—Ö –£–æ–ª—à–∞", "WAM",
			"‚Äî",
			QString::number(ve->vector->walshAveragesMed(), 'f',
					precision),
			"‚Äî", "‚Äî", "‚Äî"},
		{"–°–µ—Ä–µ–¥–Ω—å–æ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è", "–°–ö–í",
			"‚Äî",
			QString::number(ve->vector->standardDeviation(), 'f', precision),
			QString::number(ve->vector->standardDeviation(DataVector::Measure::PopulationM), 'f', precision),
			"‚Äî", "‚Äî"},
		{"–ê–±—Å–æ–ª—é—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞–Ω–∏", "MAD",
			"‚Äî",
			QString::number(ve->vector->mad(), 'f', precision), "‚Äî",
			"‚Äî", "‚Äî", "‚Äî"},
		{"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ–Ω—Ç—Ä–µ–∫—Å—Ü–µ—Å—É", "ùúò",
			"‚Äî",
			QString::number(ve->vector->counterKurtosis(), 'f', precision), 
			QString::number(ve->vector->counterKurtosis(DataVector::Measure::PopulationM), 'f', precision),
			"‚Äî", "‚Äî"},
		{"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–∞—Ä—ñ–∞—Ü—ñ—ó –ü—ñ—Ä—Å–æ–Ω–∞", "W",
			"‚Äî",
			QString::number(ve->vector->variationCoef(), 'f', precision), 
			QString::number(ve->vector->variationCoef(DataVector::Measure::PopulationM), 'f', precision),
			"‚Äî", "‚Äî"},
		{"–ù–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–π–∏ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–∞—Ä—ñ–∞—Ü—ñ—ó", "W‚Çï",
			"‚Äî",
			QString::number(ve->vector->nonparametricVariationCoef(), 'f',
					precision), 
			"‚Äî", "‚Äî", "‚Äî"},
		{"–ú–µ–¥—ñ–∞–Ω–∞", "MED", "‚Äî", QString::number(ve->vector->med(), 'f', precision), "‚Äî", "‚Äî", "‚Äî"},
		{"–†–æ–∑–º—ñ—Ä", "N", QString::number(ve->vector->size()),"‚Äî"},
		{"–ù–∞–π–º–µ–Ω—à–µ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è", "x‚Çò·µ¢‚Çô", "‚Äî", QString::number(ve->vector->min(), 'f', precision), "‚Äî", "‚Äî", "‚Äî"},
		{"–ù–∞–π–±—ñ–ª—å—à–µ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è", "x‚Çò‚Çê‚Çì", "‚Äî", QString::number(ve->vector->max(), 'f', precision), "‚Äî", "‚Äî", "‚Äî"},
		{"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç", "r", "‚Äî", QString::number(varSeries->variantsCount()), "‚Äî", "‚Äî","‚Äî"},
		};

		for (int x = 1; x <= 8; x++) {
		contents.append({"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç " + QString::number(x) + " –ø–æ—Ä—è–¥–∫—É",
				"Œº" + QString(QChar(0x2080+x)), "‚Äî", QString::number(ve->vector->centralMoment(x), 'f', precision),
				QString::number(ve->vector->centralMoment(x, DataVector::Measure::PopulationM), 'f', precision), "‚Äî", "‚Äî"});
		}
		for (int x = 1; x <= 8; x++) {
		contents.append({"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –º–æ–º–µ–Ω—Ç " + QString::number(x) + " –ø–æ—Ä—è–¥–∫—É",
				"v" + QString(QChar(0x2080+x)), "‚Äî", QString::number(ve->vector->rawMoment(x), 'f', precision), "‚Äî", "‚Äî", "‚Äî"});
		}
		for (double x = 0.0; x <= 0.5 ; x+=0.05) {
		contents.append({"–£—Å—ñ—á–µ–Ω–µ —Å–µ—Ä–µ–¥–Ω—î (Œ±=" + QString::number(x) + ")", 
				"X*", "‚Äî", QString::number(ve->vector->turncatedMean(x), 'f', precision), "‚Äî", "‚Äî", "‚Äî"});
		}


		charTable->setMinimumWidth(std::accumulate(columnWidths.begin(), columnWidths.end(), 20));
		charTable->setRowCount(contents.length());
		charTable->setColumnCount(contents[0].length());
		charTable->setHorizontalHeaderLabels(headers);

		int col = 0, row = 0;
		for (auto& rowLabels : contents) {
			col = 0;
			for (auto& itemLabel : rowLabels) {
				QTableWidgetItem* tableItem = new QTableWidgetItem(itemLabel);
				charTable->setItem(row, col, tableItem);
				charTable->setColumnWidth(col, columnWidths[col]);
				col++;
			}
			row++;
		}

		ui::Section* section = new ui::Section("–Ü–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ñ –æ—Ü—ñ–Ω–∫–∏", 100);
		lay = new QHBoxLayout;
		lay->setContentsMargins(0,0,0,0);
		charTable = new QTableWidget();
		charTable->setEditTriggers(QAbstractItemView::NoEditTriggers);
		charTable->setRowCount(4);
		charTable->setColumnCount(2);
		headers = {"–í–µ–ª–∏—á–∏–Ω–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è"};
		charTable->verticalHeader()->hide();
		charTable->setFixedHeight(165);
		charTable->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Expanding);
		charTable->setHorizontalHeaderLabels(headers);
		lay->addWidget(charTable);
		mainLayout->addWidget(section);
		QList<QStringList> deviation = {
			{"œÉ{v‚ÇÅ}", QString::number(ve->vector->meanDeviation(), 'f', precision)},
			{"œÉ{Œº‚ÇÇ}", QString::number(ve->vector->varianceDeviation(), 'f', precision)},
			{"œÉ{A}", QString::number(ve->vector->skewDeviation(), 'f', precision)},
			{"œÉ{E}", QString::number(ve->vector->kurtosisDeviation(), 'f', precision)},
		};
		charTable->setColumnWidth(0, 75);
		charTable->setColumnWidth(1, 150);
		for (row = 0; row < charTable->rowCount(); row++) {
			for (col = 0; col < charTable->columnCount(); col++) {
				QTableWidgetItem* tableItem = new QTableWidgetItem(deviation[row][col]);
				charTable->setItem(row, col, tableItem);
			}
		}
		section->setContentLayout(*lay);

		charTable = new QTableWidget();
		charTable->setEditTriggers(QAbstractItemView::NoEditTriggers);
		charTable->setRowCount(4);
		headers = {"–í–µ–ª–∏—á–∏–Ω–∞"};
		charTable->verticalHeader()->hide();
		charTable->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
		lay->addWidget(charTable);
		QList<double> probs = {
			0.99, 0.98, 0.97, 0.95, 0.9, 0.85, 0.8
		};

		charTable->setColumnCount(probs.length()*2+2);
		charTable->setColumnWidth(0, 70);

		charTable->setItem(0, 0, new QTableWidgetItem("Œ∏v‚ÇÅ"));
		charTable->setItem(1, 0, new QTableWidgetItem("Œ∏Œº‚ÇÇ"));
		charTable->setItem(2, 0, new QTableWidgetItem("Œ∏A"));
		charTable->setItem(3, 0, new QTableWidgetItem("Œ∏E"));

		for (col = 1 ; col < probs.length()+1; col++) {
			int prob = col - 1;
			headers.append("INF ùõº = " + QString::number(probs[prob]));
			charTable->setItem(0, col, new QTableWidgetItem(
						QString::number(ve->vector->meanConfidence(probs[prob], 
								DataVector::Limit::LowerL), 'f', precision)));
			charTable->setItem(1, col, new QTableWidgetItem(QString::number(
							ve->vector->varianceConfidence(probs[prob],
								DataVector::Limit::LowerL), 'f', precision)));
			charTable->setItem(2, col, new QTableWidgetItem(QString::number(
							ve->vector->skewConfidence(probs[prob], 
								DataVector::Limit::LowerL), 'f', precision)));
			charTable->setItem(3, col, new QTableWidgetItem(QString::number(
							ve->vector->kurtosisConfidence(probs[prob],
								DataVector::Limit::LowerL), 'f', precision)));
		}

		headers.append("Œ∏ –∑—Å—É–Ω—É—Ç–∞");
		charTable->setItem(0, col, new QTableWidgetItem(
					QString::number(ve->vector->mean(), 'f', precision)));
		charTable->setItem(1, col, new QTableWidgetItem(
					QString::number(ve->vector->variance(DataVector::Measure::PopulationM), 'f', precision)));
		charTable->setItem(2, col, new QTableWidgetItem(
					QString::number(ve->vector->skew(DataVector::Measure::PopulationM), 'f', precision)));
		charTable->setItem(3, col, new QTableWidgetItem(
					QString::number(ve->vector->kurtosis(DataVector::Measure::PopulationM), 'f', precision)));

		for (int from = col; col < charTable->columnCount(); col++) {
			int prob = probs.length() - (col - from) - 1;
			headers.append("SUP ùõº = " + QString::number(probs[prob]));
			charTable->setItem(0, col, new QTableWidgetItem(
						QString::number(ve->vector->meanConfidence(probs[prob], 
								DataVector::Limit::UpperL), 'f', precision)));
			charTable->setItem(1, col, new QTableWidgetItem(QString::number(
							ve->vector->varianceConfidence(probs[prob],
								DataVector::Limit::UpperL), 'f', precision)));
			charTable->setItem(2, col, new QTableWidgetItem(QString::number(
							ve->vector->skewConfidence(probs[prob], 
								DataVector::Limit::UpperL), 'f', precision)));
			charTable->setItem(3, col, new QTableWidgetItem(QString::number(
							ve->vector->kurtosisConfidence(probs[prob],
								DataVector::Limit::UpperL), 'f', precision)));
		}

		charTable->setHorizontalHeaderLabels(headers);

		section = new ui::Section("–í–∞—Ä—ñ–∞—Ü—ñ–π–Ω–∏–π —Ä—è–¥", 100);
		lay = new QHBoxLayout;
		lay->setContentsMargins(0,0,0,0);
		charTable = new QTableWidget;
		charTable->setFixedHeight(130);
		charTable->setEditTriggers(QAbstractItemView::NoEditTriggers);
		lay->addWidget(charTable);
		mainLayout->addWidget(section);

		charTable->setRowCount(3);
		charTable->setColumnCount(varSeries->variantsCount());
		charTable->setEditTriggers(QAbstractItemView::NoEditTriggers);
		charTable->setVerticalHeaderLabels(
				{"–í–∞—Ä—ñ–∞–Ω—Ç–∞", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–í—ñ–¥–Ω–æ—Å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞"}
				);

		col = 0;
		for (auto const& [variant, value] : varSeries->series()) {
			QTableWidgetItem* tableItem = new QTableWidgetItem(
					QString::number(variant, 'f', precision));
			charTable->setItem(0, col, tableItem);
			tableItem = new QTableWidgetItem(
					QString::number(value.first));
			charTable->setItem(1, col, tableItem);
			tableItem = new QTableWidgetItem(
					QString::number(value.second, 'f', precision));
			charTable->setItem(2, col, tableItem);
			col++;
		}
		section->setContentLayout(*lay);

		this->resize(800, 300);
		this->show();
}

void VectorInfoDialog::vectorDeletedHandler(VectorEntry* vectorEntry) {
	if (vectorEntry == ve)
		this->close();
}
